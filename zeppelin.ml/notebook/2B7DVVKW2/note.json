{
  "paragraphs": [
    {
      "text": "import com.elsevier.spark_xml_utils.xpath.XPathProcessor\nimport scala.collection.JavaConverters._\nimport java.util.HashMap \n\nval xmlKeyPair \u003d sc.sequenceFile[String, String](\"/root/pipeline/datasets/meetup/meetup-calendar-rss.xml\")",
      "dateUpdated": "May 5, 2016 2:14:02 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1453059307487_1015493184",
      "id": "20160117-193507_636658014",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "import com.elsevier.spark_xml_utils.xpath.XPathProcessor\nimport scala.collection.JavaConverters._\nimport java.util.HashMap\nxmlKeyPair: org.apache.spark.rdd.RDD[(String, String)] \u003d MapPartitionsRDD[5] at sequenceFile at \u003cconsole\u003e:41\n"
      },
      "dateCreated": "Jan 17, 2016 7:35:07 PM",
      "dateStarted": "Jan 19, 2016 1:33:45 AM",
      "dateFinished": "Jan 19, 2016 1:33:46 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "val filtered \u003d xmlKeyPair.mapPartitions(recordIter \u003d\u003e {\n  val xpath \u003d \"/title\"\n  val proc \u003d XPathProcessor.getInstance(xpath)\n    \n  recordIter.filter(rec \u003d\u003e proc.filterString(rec._2))\n})\n\nfiltered.collect()\n",
      "dateUpdated": "Jan 19, 2016 1:33:49 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1453167009536_-529582808",
      "id": "20160119-013009_267194181",
      "result": {
        "code": "ERROR",
        "type": "TEXT",
        "msg": "filtered: org.apache.spark.rdd.RDD[(String, String)] \u003d MapPartitionsRDD[6] at mapPartitions at \u003cconsole\u003e:41\norg.apache.hadoop.mapred.InvalidInputException: Input path does not exist: file:/root/pipeline/datasets/meetup/meetup-calendar-rss.xml\n\tat org.apache.hadoop.mapred.FileInputFormat.singleThreadedListStatus(FileInputFormat.java:285)\n\tat org.apache.hadoop.mapred.FileInputFormat.listStatus(FileInputFormat.java:228)\n\tat org.apache.hadoop.mapred.SequenceFileInputFormat.listStatus(SequenceFileInputFormat.java:45)\n\tat org.apache.hadoop.mapred.FileInputFormat.getSplits(FileInputFormat.java:313)\n\tat org.apache.spark.rdd.HadoopRDD.getPartitions(HadoopRDD.scala:199)\n\tat org.apache.spark.rdd.RDD$$anonfun$partitions$2.apply(RDD.scala:239)\n\tat org.apache.spark.rdd.RDD$$anonfun$partitions$2.apply(RDD.scala:237)\n\tat scala.Option.getOrElse(Option.scala:120)\n\tat org.apache.spark.rdd.RDD.partitions(RDD.scala:237)\n\tat org.apache.spark.rdd.MapPartitionsRDD.getPartitions(MapPartitionsRDD.scala:35)\n\tat org.apache.spark.rdd.RDD$$anonfun$partitions$2.apply(RDD.scala:239)\n\tat org.apache.spark.rdd.RDD$$anonfun$partitions$2.apply(RDD.scala:237)\n\tat scala.Option.getOrElse(Option.scala:120)\n\tat org.apache.spark.rdd.RDD.partitions(RDD.scala:237)\n\tat org.apache.spark.rdd.MapPartitionsRDD.getPartitions(MapPartitionsRDD.scala:35)\n\tat org.apache.spark.rdd.RDD$$anonfun$partitions$2.apply(RDD.scala:239)\n\tat org.apache.spark.rdd.RDD$$anonfun$partitions$2.apply(RDD.scala:237)\n\tat scala.Option.getOrElse(Option.scala:120)\n\tat org.apache.spark.rdd.RDD.partitions(RDD.scala:237)\n\tat org.apache.spark.SparkContext.runJob(SparkContext.scala:1929)\n\tat org.apache.spark.rdd.RDD$$anonfun$collect$1.apply(RDD.scala:927)\n\tat org.apache.spark.rdd.RDDOperationScope$.withScope(RDDOperationScope.scala:150)\n\tat org.apache.spark.rdd.RDDOperationScope$.withScope(RDDOperationScope.scala:111)\n\tat org.apache.spark.rdd.RDD.withScope(RDD.scala:316)\n\tat org.apache.spark.rdd.RDD.collect(RDD.scala:926)\n\tat $iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC.\u003cinit\u003e(\u003cconsole\u003e:45)\n\tat $iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC.\u003cinit\u003e(\u003cconsole\u003e:50)\n\tat $iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC.\u003cinit\u003e(\u003cconsole\u003e:52)\n\tat $iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC.\u003cinit\u003e(\u003cconsole\u003e:54)\n\tat $iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC.\u003cinit\u003e(\u003cconsole\u003e:56)\n\tat $iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC.\u003cinit\u003e(\u003cconsole\u003e:58)\n\tat $iwC$$iwC$$iwC$$iwC$$iwC$$iwC.\u003cinit\u003e(\u003cconsole\u003e:60)\n\tat $iwC$$iwC$$iwC$$iwC$$iwC.\u003cinit\u003e(\u003cconsole\u003e:62)\n\tat $iwC$$iwC$$iwC$$iwC.\u003cinit\u003e(\u003cconsole\u003e:64)\n\tat $iwC$$iwC$$iwC.\u003cinit\u003e(\u003cconsole\u003e:66)\n\tat $iwC$$iwC.\u003cinit\u003e(\u003cconsole\u003e:68)\n\tat $iwC.\u003cinit\u003e(\u003cconsole\u003e:70)\n\tat \u003cinit\u003e(\u003cconsole\u003e:72)\n\tat .\u003cinit\u003e(\u003cconsole\u003e:76)\n\tat .\u003cclinit\u003e(\u003cconsole\u003e)\n\tat .\u003cinit\u003e(\u003cconsole\u003e:7)\n\tat .\u003cclinit\u003e(\u003cconsole\u003e)\n\tat $print(\u003cconsole\u003e)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:497)\n\tat org.apache.spark.repl.SparkIMain$ReadEvalPrint.call(SparkIMain.scala:1065)\n\tat org.apache.spark.repl.SparkIMain$Request.loadAndRun(SparkIMain.scala:1346)\n\tat org.apache.spark.repl.SparkIMain.loadAndRunReq$1(SparkIMain.scala:840)\n\tat org.apache.spark.repl.SparkIMain.interpret(SparkIMain.scala:871)\n\tat org.apache.spark.repl.SparkIMain.interpret(SparkIMain.scala:819)\n\tat org.apache.zeppelin.spark.SparkInterpreter.interpretInput(SparkInterpreter.java:709)\n\tat org.apache.zeppelin.spark.SparkInterpreter.interpret(SparkInterpreter.java:674)\n\tat org.apache.zeppelin.spark.SparkInterpreter.interpret(SparkInterpreter.java:667)\n\tat org.apache.zeppelin.interpreter.ClassloaderInterpreter.interpret(ClassloaderInterpreter.java:57)\n\tat org.apache.zeppelin.interpreter.LazyOpenInterpreter.interpret(LazyOpenInterpreter.java:93)\n\tat org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer$InterpretJob.jobRun(RemoteInterpreterServer.java:300)\n\tat org.apache.zeppelin.scheduler.Job.run(Job.java:169)\n\tat org.apache.zeppelin.scheduler.FIFOScheduler$1.run(FIFOScheduler.java:134)\n\tat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\n\tat java.util.concurrent.FutureTask.run(FutureTask.java:266)\n\tat java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180)\n\tat java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\n\tat java.lang.Thread.run(Thread.java:745)\n\n"
      },
      "dateCreated": "Jan 19, 2016 1:30:09 AM",
      "dateStarted": "Jan 19, 2016 1:33:49 AM",
      "dateFinished": "Jan 19, 2016 1:33:50 AM",
      "status": "ERROR",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "import org.apache.spark.graphx._\r\n\r\nimport scala.reflect.ClassTag\r\n\r\ndef drawGraph[VD:ClassTag,ED:ClassTag](g:Graph[VD,ED]) \u003d {\r\n  val u \u003d java.util.UUID.randomUUID\r\n  val v \u003d g.vertices.collect.map(_._1)\r\n  println(\"\"\"%html\r\n\u003cdiv id\u003d\u0027a\"\"\" + u + \"\"\"\u0027 style\u003d\u0027width:960px; height:500px\u0027\u003e\u003c/div\u003e\r\n\u003cstyle\u003e\r\n.node circle { fill: gray; }\r\n.node text { font: 10px sans-serif;\r\n             text-anchor: middle;\r\n             fill: white; }\r\nline.link { stroke: gray;\r\n            stroke-width: 1.5px; }\r\n\u003c/style\u003e\r\n\u003cscript src\u003d\"//d3js.org/d3.v3.min.js\"\u003e\u003c/script\u003e\r\n\u003cscript\u003e\r\nvar width \u003d 960, height \u003d 500;\r\n\r\nvar svg \u003d d3.select(\"#a\"\"\" + u + \"\"\"\").append(\"svg\")\r\n    .attr(\"width\", width).attr(\"height\", height);\r\n\r\nvar nodes \u003d [\"\"\" + v.map(\"{id:\" + _ + \"}\").mkString(\",\") + \"\"\"];\r\nvar links \u003d [\"\"\" + g.edges.collect.map(\r\n  e \u003d\u003e \"{source:nodes[\" + v.indexWhere(_ \u003d\u003d e.srcId) + \"],target:nodes[\" +\r\n       v.indexWhere(_ \u003d\u003d e.dstId) + \"]}\").mkString(\",\") + \"\"\"];\r\n\r\nvar link \u003d svg.selectAll(\".link\").data(links);\r\nlink.enter().insert(\"line\", \".node\").attr(\"class\", \"link\");\r\n\r\nvar node \u003d svg.selectAll(\".node\").data(nodes);\r\nvar nodeEnter \u003d node.enter().append(\"g\").attr(\"class\", \"node\")\r\n\r\nnodeEnter.append(\"circle\").attr(\"r\", 8);\r\n\r\nnodeEnter.append(\"text\").attr(\"dy\", \"0.35em\")\r\n         .text(function(d) { return d.id; });\r\n\r\nd3.layout.force().linkDistance(50).charge(-200).chargeDistance(300)\r\n   .friction(0.95).linkStrength(0.5).size([width, height])\r\n   .on(\"tick\", function() {\r\n      link.attr(\"x1\", function(d) { return d.source.x; })\r\n          .attr(\"y1\", function(d) { return d.source.y; })\r\n          .attr(\"x2\", function(d) { return d.target.x; })\r\n          .attr(\"y2\", function(d) { return d.target.y; });\r\n      node.attr(\"transform\", function(d) {\r\n        return \"translate(\" + d.x + \",\" + d.y + \")\";\r\n      });\r\n   }).nodes(nodes).links(links).start();\r\n\u003c/script\u003e\r\n\"\"\")\r\n}\r\n\r\ndrawGraph(org.apache.spark.graphx.util.GraphGenerators.rmatGraph(sc,32,60))\r\n",
      "dateUpdated": "Feb 26, 2016 7:20:04 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1453167186890_-557191139",
      "id": "20160119-013306_105840535",
      "result": {
        "code": "SUCCESS",
        "type": "HTML",
        "msg": "\u003cdiv id\u003d\u0027a13418e26-9318-4896-b31c-77960bfae758\u0027 style\u003d\u0027width:960px; height:500px\u0027\u003e\u003c/div\u003e\n\u003cstyle\u003e\n.node circle { fill: gray; }\n.node text { font: 10px sans-serif;\n             text-anchor: middle;\n             fill: white; }\nline.link { stroke: gray;\n            stroke-width: 1.5px; }\n\u003c/style\u003e\n\u003cscript src\u003d\"//d3js.org/d3.v3.min.js\"\u003e\u003c/script\u003e\n\u003cscript\u003e\nvar width \u003d 960, height \u003d 500;\n\nvar svg \u003d d3.select(\"#a13418e26-9318-4896-b31c-77960bfae758\").append(\"svg\")\n    .attr(\"width\", width).attr(\"height\", height);\n\nvar nodes \u003d [{id:16},{id:22},{id:28},{id:30},{id:24},{id:18},{id:20},{id:26},{id:19},{id:21},{id:25},{id:29},{id:27},{id:23},{id:17},{id:31}];\nvar links \u003d [{source:nodes[0],target:nodes[14]},{source:nodes[0],target:nodes[5]},{source:nodes[0],target:nodes[6]},{source:nodes[14],target:nodes[0]},{source:nodes[14],target:nodes[6]},{source:nodes[14],target:nodes[4]},{source:nodes[14],target:nodes[10]},{source:nodes[14],target:nodes[3]},{source:nodes[5],target:nodes[14]},{source:nodes[5],target:nodes[1]},{source:nodes[5],target:nodes[7]},{source:nodes[8],target:nodes[5]},{source:nodes[8],target:nodes[8]},{source:nodes[6],target:nodes[1]},{source:nodes[9],target:nodes[9]},{source:nodes[9],target:nodes[13]},{source:nodes[9],target:nodes[10]},{source:nodes[1],target:nodes[1]},{source:nodes[4],target:nodes[0]},{source:nodes[4],target:nodes[10]},{source:nodes[10],target:nodes[14]},{source:nodes[10],target:nodes[10]},{source:nodes[10],target:nodes[11]},{source:nodes[7],target:nodes[12]},{source:nodes[12],target:nodes[10]},{source:nodes[2],target:nodes[8]},{source:nodes[2],target:nodes[1]},{source:nodes[2],target:nodes[2]},{source:nodes[2],target:nodes[11]},{source:nodes[11],target:nodes[2]},{source:nodes[0],target:nodes[0]},{source:nodes[14],target:nodes[14]},{source:nodes[14],target:nodes[5]},{source:nodes[14],target:nodes[13]},{source:nodes[5],target:nodes[5]},{source:nodes[8],target:nodes[14]},{source:nodes[8],target:nodes[9]},{source:nodes[8],target:nodes[10]},{source:nodes[6],target:nodes[0]},{source:nodes[6],target:nodes[9]},{source:nodes[9],target:nodes[12]},{source:nodes[1],target:nodes[2]},{source:nodes[1],target:nodes[3]},{source:nodes[1],target:nodes[15]},{source:nodes[13],target:nodes[6]},{source:nodes[13],target:nodes[11]},{source:nodes[4],target:nodes[14]},{source:nodes[4],target:nodes[5]},{source:nodes[4],target:nodes[4]},{source:nodes[10],target:nodes[8]},{source:nodes[10],target:nodes[4]},{source:nodes[7],target:nodes[5]},{source:nodes[12],target:nodes[1]},{source:nodes[2],target:nodes[14]},{source:nodes[11],target:nodes[14]},{source:nodes[11],target:nodes[4]},{source:nodes[11],target:nodes[11]},{source:nodes[3],target:nodes[5]},{source:nodes[3],target:nodes[6]},{source:nodes[3],target:nodes[3]}];\n\nvar link \u003d svg.selectAll(\".link\").data(links);\nlink.enter().insert(\"line\", \".node\").attr(\"class\", \"link\");\n\nvar node \u003d svg.selectAll(\".node\").data(nodes);\nvar nodeEnter \u003d node.enter().append(\"g\").attr(\"class\", \"node\")\n\nnodeEnter.append(\"circle\").attr(\"r\", 8);\n\nnodeEnter.append(\"text\").attr(\"dy\", \"0.35em\")\n         .text(function(d) { return d.id; });\n\nd3.layout.force().linkDistance(50).charge(-200).chargeDistance(300)\n   .friction(0.95).linkStrength(0.5).size([width, height])\n   .on(\"tick\", function() {\n      link.attr(\"x1\", function(d) { return d.source.x; })\n          .attr(\"y1\", function(d) { return d.source.y; })\n          .attr(\"x2\", function(d) { return d.target.x; })\n          .attr(\"y2\", function(d) { return d.target.y; });\n      node.attr(\"transform\", function(d) {\n        return \"translate(\" + d.x + \",\" + d.y + \")\";\n      });\n   }).nodes(nodes).links(links).start();\n\u003c/script\u003e\n\n"
      },
      "dateCreated": "Jan 19, 2016 1:33:06 AM",
      "dateStarted": "Feb 26, 2016 7:20:04 AM",
      "dateFinished": "Feb 26, 2016 7:20:05 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "println(\"\"\"%html BOO\"\"\")",
      "dateUpdated": "Feb 29, 2016 3:56:17 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1456471172499_-111592900",
      "id": "20160226-071932_648132826",
      "result": {
        "code": "SUCCESS",
        "type": "HTML",
        "msg": "BOO\n"
      },
      "dateCreated": "Feb 26, 2016 7:19:32 AM",
      "dateStarted": "Feb 29, 2016 3:56:17 AM",
      "dateFinished": "Feb 29, 2016 3:56:32 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "http://vis-www.cs.umass.edu/lfw/lfw-names.txt",
      "dateUpdated": "May 5, 2016 2:14:02 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1456471224744_-1004717691",
      "id": "20160226-072024_1248258686",
      "dateCreated": "Feb 26, 2016 7:20:24 AM",
      "status": "READY",
      "progressUpdateIntervalMs": 500
    }
  ],
  "name": "ZZ_Scratch",
  "id": "2B7DVVKW2",
  "angularObjects": {
    "2ARR8UZDJ": [],
    "2AS9P7JSA": [],
    "2AR33ZMZJ": []
  },
  "config": {},
  "info": {}
}