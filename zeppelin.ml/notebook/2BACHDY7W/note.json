{
  "paragraphs": [
    {
      "title": "cosine similarity",
      "text": "%md ![Cosine Similarity](http://advancedspark.com/img/cosine-similarity.png)\n![Cosine Similarity Calculation](http://advancedspark.com/img/cosine-similarity-calculation.png)\n## Normalize to unit vectors\n### (dot product of two vectors) / (product of their lengths)",
      "dateUpdated": "May 16, 2016 1:45:13 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/scala",
        "editorHide": true,
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1454632233294_718975948",
      "id": "20160205-003033_66369134",
      "result": {
        "code": "SUCCESS",
        "type": "HTML",
        "msg": "\u003cp\u003e\u003cimg src\u003d\"http://advancedspark.com/img/cosine-similarity.png\" alt\u003d\"Cosine Similarity\" /\u003e\n\u003cbr  /\u003e\u003cimg src\u003d\"http://advancedspark.com/img/cosine-similarity-calculation.png\" alt\u003d\"Cosine Similarity Calculation\" /\u003e\u003c/p\u003e\n\u003ch2\u003eNormalize to unit vectors\u003c/h2\u003e\n\u003ch3\u003e(dot product of two vectors) / (product of their lengths)\u003c/h3\u003e\n"
      },
      "dateCreated": "Feb 5, 2016 12:30:33 AM",
      "dateStarted": "May 16, 2016 1:44:54 AM",
      "dateFinished": "May 16, 2016 1:44:54 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "brute force cosine similarity",
      "text": "import org.apache.spark.mllib.linalg.Vectors\nimport org.jblas.DoubleMatrix\n             //user0, user1, user2, user3\nval item0 \u003d Seq(1.0,   1.0,   0.0,   0.0) // item0\nval item1 \u003d Seq(1.0,   1.0,   1.0,   1.0) // item1\nval item2 \u003d Seq(1.0,   1.0,   0.0,   0.0) // item2\n\nval userVector0 \u003d new DoubleMatrix(item0.map(_.toDouble).toArray)\nval userVector1 \u003d new DoubleMatrix(item1.map(_.toDouble).toArray)\nval userVector2 \u003d new DoubleMatrix(item2.map(_.toDouble).toArray)\n\nval cosineSimilarity02 \u003d userVector0.dot(userVector2) / (userVector0.norm2() * userVector2.norm2())\nval cosineSimilarity01 \u003d userVector0.dot(userVector1) / (userVector0.norm2() * userVector1.norm2())\nval cosineSimilarity12 \u003d userVector1.dot(userVector2) / (userVector1.norm2() * userVector2.norm2())",
      "dateUpdated": "Apr 4, 2016 4:40:31 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/scala",
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1456946809047_63238648",
      "id": "20160302-192649_1447087000",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "import org.apache.spark.mllib.linalg.Vectors\nimport org.jblas.DoubleMatrix\nitem0: Seq[Double] \u003d List(1.0, 1.0, 0.0, 0.0)\nitem1: Seq[Double] \u003d List(1.0, 1.0, 1.0, 1.0)\nitem2: Seq[Double] \u003d List(1.0, 1.0, 0.0, 0.0)\nuserVector0: org.jblas.DoubleMatrix \u003d [1.000000; 1.000000; 0.000000; 0.000000]\nuserVector1: org.jblas.DoubleMatrix \u003d [1.000000; 1.000000; 1.000000; 1.000000]\nuserVector2: org.jblas.DoubleMatrix \u003d [1.000000; 1.000000; 0.000000; 0.000000]\ncosineSimilarity02: Double \u003d 0.9999999999999998\ncosineSimilarity01: Double \u003d 0.7071067811865475\ncosineSimilarity12: Double \u003d 0.7071067811865475\n"
      },
      "dateCreated": "Mar 2, 2016 7:26:49 PM",
      "dateStarted": "Apr 4, 2016 4:40:31 AM",
      "dateFinished": "Apr 4, 2016 4:40:32 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Helper method for bruce force cosine similarity",
      "text": "import com.advancedspark.ml.Similarity\n\nval cosineSimilarity02 \u003d Similarity.cosineSimilarity(userVector0, userVector2)\nval cosineSimilarity01 \u003d Similarity.cosineSimilarity(userVector0, userVector1)\nval cosineSimilarity12 \u003d Similarity.cosineSimilarity(userVector1, userVector2)",
      "dateUpdated": "Apr 4, 2016 4:40:31 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/scala",
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1456948081595_-2055335459",
      "id": "20160302-194801_351295495",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "import com.advancedspark.ml.Similarity\ncosineSimilarity02: Double \u003d 0.9999999999999998\ncosineSimilarity01: Double \u003d 0.7071067811865475\ncosineSimilarity12: Double \u003d 0.7071067811865475\n"
      },
      "dateCreated": "Mar 2, 2016 7:48:01 PM",
      "dateStarted": "Apr 4, 2016 4:40:31 AM",
      "dateFinished": "Apr 4, 2016 4:40:32 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md ### RowMatrix Helper Method for Brute Force Exact and Approx Similarity Matrix",
      "dateUpdated": "Apr 4, 2016 4:40:31 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/markdown",
        "editorHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1456948183740_1040293418",
      "id": "20160302-194943_1345948549",
      "result": {
        "code": "SUCCESS",
        "type": "HTML",
        "msg": "\u003ch3\u003eRowMatrix Helper Method for Brute Force Exact and Approx Similarity Matrix\u003c/h3\u003e\n"
      },
      "dateCreated": "Mar 2, 2016 7:49:43 PM",
      "dateStarted": "Apr 4, 2016 4:40:32 AM",
      "dateFinished": "Apr 4, 2016 4:40:32 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Setup the Row-major matrix",
      "text": "import org.apache.spark.mllib.linalg.Vectors\nimport org.apache.spark.mllib.linalg.distributed.IndexedRowMatrix\nimport org.apache.spark.mllib.linalg.distributed.IndexedRow\n\nval items \u003d Array(\n                (0, item0.toArray), \n                (1, item1.toArray), \n                (2, item2.toArray)  \n           )\n\nval rows \u003d sc.parallelize(items).map { case (idx, arr) \u003d\u003e\n  IndexedRow(idx, Vectors.dense(arr))\n}.cache()",
      "dateUpdated": "Apr 4, 2016 4:40:32 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/scala",
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1455820710736_-1495778191",
      "id": "20160218-183830_1191565247",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "import org.apache.spark.mllib.linalg.Vectors\nimport org.apache.spark.mllib.linalg.distributed.IndexedRowMatrix\nimport org.apache.spark.mllib.linalg.distributed.IndexedRow\nitems: Array[(Int, Array[Double])] \u003d Array((0,Array(1.0, 1.0, 0.0, 0.0)), (1,Array(1.0, 1.0, 1.0, 1.0)), (2,Array(1.0, 1.0, 0.0, 0.0)))\nrows: org.apache.spark.rdd.RDD[org.apache.spark.mllib.linalg.distributed.IndexedRow] \u003d MapPartitionsRDD[1436] at map at \u003cconsole\u003e:117\n"
      },
      "dateCreated": "Feb 18, 2016 6:38:30 PM",
      "dateStarted": "Apr 4, 2016 4:40:32 AM",
      "dateFinished": "Apr 4, 2016 4:40:33 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Transpose the matrix as columnSimilarities() expects Column-major matrix (?!)",
      "text": "val mat \u003d new IndexedRowMatrix(rows).toCoordinateMatrix.transpose().toRowMatrix()",
      "dateUpdated": "Apr 4, 2016 4:40:36 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/scala",
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1455828879712_1620257334",
      "id": "20160218-205439_1141960838",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "mat: org.apache.spark.mllib.linalg.distributed.RowMatrix \u003d org.apache.spark.mllib.linalg.distributed.RowMatrix@42b76dec\n"
      },
      "dateCreated": "Feb 18, 2016 8:54:39 PM",
      "dateStarted": "Apr 4, 2016 4:40:37 AM",
      "dateFinished": "Apr 4, 2016 4:41:07 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "RowMatrix Brute Force Exact Cosine Similarity",
      "text": "import org.apache.spark.mllib.linalg.distributed.MatrixEntry\n\nval exact \u003d mat.columnSimilarities()\n\nval exactEntries \u003d exact.entries.map { case MatrixEntry(i, j, u) \u003d\u003e ((i, j), u) }\nprintln(s\"\"\"\\nsimilarity\\t\\t\\titem#\\titem#\"\"\")\n\nexactEntries.collect().sortBy(- _._2).foreach(entry \u003d\u003e println(s\"\"\"${entry._2}\\t\\t${entry._1._1}\\t${entry._1._2}\"\"\"))\n",
      "dateUpdated": "Apr 4, 2016 4:40:37 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/scala",
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1452915365631_-96193142",
      "id": "20160116-033605_1330878621",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "import org.apache.spark.mllib.linalg.distributed.MatrixEntry\nexact: org.apache.spark.mllib.linalg.distributed.CoordinateMatrix \u003d org.apache.spark.mllib.linalg.distributed.CoordinateMatrix@328ef127\nexactEntries: org.apache.spark.rdd.RDD[((Long, Long), Double)] \u003d MapPartitionsRDD[1448] at map at \u003cconsole\u003e:124\n\nsimilarity\t\t\titem#\titem#\n0.9999999999999998\t\t0\t2\n0.7071067811865475\t\t0\t1\n0.7071067811865475\t\t1\t2\n"
      },
      "dateCreated": "Jan 16, 2016 3:36:05 AM",
      "dateStarted": "Apr 4, 2016 4:40:38 AM",
      "dateFinished": "Apr 4, 2016 4:41:23 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n## Dimension Independent Matrix Square using MapReduce (DIMSUM)\n* Sample sparse columns (many zero\u0027s) at a higher probability\n* Sample dense columns (many non-zero\u0027s) at a lower probability\n\n### Intuition: _Reduce shuffle_ by sampling dense columns less since they exist in more trials\n\n[Databricks Blog Post](https://databricks.com/blog/2014/10/20/efficient-similarity-algorithm-now-in-spark-twitter.html)",
      "dateUpdated": "Apr 4, 2016 4:40:38 AM",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1452915365631_-96193142",
      "id": "20160116-033605_1813132370",
      "result": {
        "code": "SUCCESS",
        "type": "HTML",
        "msg": "\u003ch2\u003eDimension Independent Matrix Square using MapReduce (DIMSUM)\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eSample sparse columns (many zero\u0027s) at a higher probability\u003c/li\u003e\n\u003cli\u003eSample dense columns (many non-zero\u0027s) at a lower probability\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eIntuition: \u003cem\u003eReduce shuffle\u003c/em\u003e by sampling dense columns less since they exist in more trials\u003c/h3\u003e\n\u003cp\u003e\u003ca href\u003d\"https://databricks.com/blog/2014/10/20/efficient-similarity-algorithm-now-in-spark-twitter.html\"\u003eDatabricks Blog Post\u003c/a\u003e\u003c/p\u003e\n"
      },
      "dateCreated": "Jan 16, 2016 3:36:05 AM",
      "dateStarted": "Apr 4, 2016 4:40:38 AM",
      "dateFinished": "Apr 4, 2016 4:40:38 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Approximate column Similarities using DIMSUM",
      "text": "import org.apache.spark.mllib.linalg.distributed.MatrixEntry\n\n// Similarity Threshold:  Trade-off between performance and error\nval similarityThreshold \u003d 0.5\n\nval approx \u003d mat.columnSimilarities(similarityThreshold)\nval approxEntries \u003d approx.entries.map { case MatrixEntry(i, j, v) \u003d\u003e ((i, j), v) }\n\nprintln(s\"\"\"\\nsimilarity\\t\\t\\titem#\\titem#\"\"\")\napproxEntries.collect().sortBy(- _._2).foreach(entry \u003d\u003e println(s\"\"\"${entry._2}\\t\\t${entry._1._1}\\t${entry._1._2}\"\"\"))",
      "dateUpdated": "Apr 4, 2016 4:40:38 AM",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "title": true,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1452915365631_-96193142",
      "id": "20160116-033605_1757567650",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "import org.apache.spark.mllib.linalg.distributed.MatrixEntry\nsimilarityThreshold: Double \u003d 0.5\napprox: org.apache.spark.mllib.linalg.distributed.CoordinateMatrix \u003d org.apache.spark.mllib.linalg.distributed.CoordinateMatrix@5858f5a3\napproxEntries: org.apache.spark.rdd.RDD[((Long, Long), Double)] \u003d MapPartitionsRDD[1453] at map at \u003cconsole\u003e:127\n\nsimilarity\t\t\titem#\titem#\n0.9999999999999998\t\t0\t2\n0.7071067811865475\t\t0\t1\n0.7071067811865475\t\t1\t2\n"
      },
      "dateCreated": "Jan 16, 2016 3:36:05 AM",
      "dateStarted": "Apr 4, 2016 4:41:07 AM",
      "dateFinished": "Apr 4, 2016 4:41:24 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Mean Absolute Error",
      "text": "val meanAbsoluteError \u003d exactEntries.leftOuterJoin(approxEntries).values.map {\n  case (u, Some(v)) \u003d\u003e\n    math.abs(u - v)\n  case (u, None) \u003d\u003e\n    math.abs(u)\n}.mean()",
      "dateUpdated": "Apr 4, 2016 4:40:38 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/scala",
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1454562829860_-1082070217",
      "id": "20160204-051349_1963629038",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "meanAbsoluteError: Double \u003d 0.0\n"
      },
      "dateCreated": "Feb 4, 2016 5:13:49 AM",
      "dateStarted": "Apr 4, 2016 4:41:24 AM",
      "dateFinished": "Apr 4, 2016 4:41:39 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "dateUpdated": "Apr 4, 2016 4:40:38 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1454562892597_226304261",
      "id": "20160204-051452_1994155407",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT"
      },
      "dateCreated": "Feb 4, 2016 5:14:52 AM",
      "dateStarted": "Apr 4, 2016 4:41:25 AM",
      "dateFinished": "Apr 4, 2016 4:41:39 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    }
  ],
  "name": "Clustering/04: Exact (Cosine) vs Approximate Similarity (DIMSUM)",
  "id": "2BACHDY7W",
  "angularObjects": {
    "2ARR8UZDJ": [],
    "2AS9P7JSA": []
  },
  "config": {
    "looknfeel": "default"
  },
  "info": {}
}